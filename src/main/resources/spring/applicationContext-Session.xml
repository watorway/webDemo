<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						">


	<!-- 声明事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用注解方式的事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> -->
	
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- session工厂Bean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 指定sqlMapConfig总配置文件，订制的environment在spring容器中不在生效 -->
		<property name="configLocation" value="classpath:mybatis/myBatis-Configuration.xml" />

		<!-- 也可以使用下面的配置代替mybatis配置文件中的
			mappers配置，可以将mapper接口和映射xml分开
		 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/webDemo/mapping/*.xml</value>
			</list>
		</property>
		<!--<property name="mapperLocations" value="com/webDemo/mapping/*Mapper.xml" />-->
		
		<property name="typeAliasesPackage" value="com.webDemo.entity"></property>
	</bean>

	<!-- MyBatis注入sqlSessionFactory -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- Mapper接口所在包名，basePackage 属性是让你为映射器接口文件设置基本的包路径。 -->
		<property name="basePackage" value="com.webDemo.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>


	<!-- 定义事务
	所有以query开头的方法都是只读的
	其他方法使用默认事务策略 
	
	pointcut元素定义一个切入点，execution中的第一个星号 用以匹配方法的返回类型， 这里星号表明匹配所有返回类型。 com.mucoo.mapper.*.*(..)表明匹配com.mucoo.service包下的所有类的所有方法
	将定义好的事务处理策略应用到上述的切入点
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="myPointcut" expression="execution(* com.mucoo.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut" />
	</aop:config>
	-->

	
</beans>